// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // =================== Control Unit ===================

    // Abstracting instruction
    And16(a=instruction, b=outMPrev, out[0..2]=bitsJMP, out[3..5]=bitsDEST, out[6..11]=bitsALUControl,
            out[12]=bitA, out[15]=bitType);


    // Address-Register part
    // We might use coming instruction if it's an A-Instruction, otherwise we'll get from outM
    Mux16(a=instruction, b=outMPrev, sel=instruction[15], out=muxedAddress); // update A with current instruction or keep the A(t-1)?
    ARegister(in=muxedAddress, load=bitsDEST[2],out=AddressRegisterValue, out=addressM);

    // Decide next instruction

    // =================== PC ===================

    // else if C-Instruction, jmp control bits logic
    Xor(a=bitsJMP[0], b=instruction[0], out=jmpXor0);
    Xor(a=bitsJMP[1], b=instruction[1], out=jmpXor1);
    Xor(a=bitsJMP[2], b=instruction[2], out=jmpXor2);

    Or3(a=jmpXor0, b=jmpXor1, c=jmpXor2, out=jmpOr3);

    Not(in=jmpOr3, out=loadIfNonNullJMPBits);

    // if control bits == 0, 0, 0 => inc=1, load=0
    Or3(a=bitsJMP[0], b=bitsJMP[1], c=bitsJMP[2], out=isNotNullJMPBits);

    Mux(a=0, b=loadIfNonNullJMPBits, sel=isNotNullJMPBits, out=loadIfCinstruction);

    // if A-Instruction => inc=1, load=0
    // In this case, load=instruction[15] itself

    // Decide between loadIfCInstruction or loadIfAinstruction
    Mux(a=0, b=loadIfCinstruction, sel=instruction[15], out=pcLoad);

    // They will always be the opposite since
    // either the CPU jumps to a X instruction or it increments 1
    Not(in=pcLoad, out=pcInc);

    PC(in=AddressRegisterValue, load=pcLoad, inc=pcInc, reset=reset, out=pc);

    // =================== ALU ===================

    // Address/Memory acting as ALU's input part
    Mux16(a=AddressRegisterValue, b=inM, sel=instruction[], out=ALUyInputAddressOrMemory);

    // DataRegister part
    DRegister(in=outMPrev, load=bitsDEST[1], out=DataRegisterValue);

    // Finally, ALU
    ALU(x=DataRegisterValue, y=ALUyInputAddressOrMemory,
        zx=,
        nx=,
        zy=,
        ny=,
        f=,
        no=,

        out=outM,
        out=outMPrev,
        zr=outEqualsZero,
        ng=outLessThanZero);

    // WriteM part

}
