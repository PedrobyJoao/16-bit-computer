// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // =================== Control Unit ===================

    // Decoding instruction into small pieces
    And16(a=instruction, b=instruction, out[3]=bitDestMemory, out[4]=bitDestDataRegister, out[5]=bitDestARegister,
            out[6..11]=bitsALUControl, out[12]=bitA, out[15]=instructionType);


    // Address-Register part
    // We might use coming instruction if it's an A-Instruction, otherwise we'll get from outM
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=muxedARegister); // update A with current instruction or keep the A(t-1)?

    // If A-Instruction, load=1, otherwise we should check destination bits
    // instruction[15]     bitDestARegister        out
    //     0                   0                    1
    //     0                   1                    1
    //     1                   0                    0
    //     1                   1                    1
    // not(i) . not(b) + not(i) . b + i . b
    // not(i) . not(b) + b . (not(i) + i)
    // not(i) . not(b) + b
    Not(in=instructionType, out=notInstructionType);
    Not(in=bitDestARegister, out=notBitDestARegister);
    And(a=notInstructionType, b=notBitDestARegister, out=notInstTypeANDNotBitDestARegister);
    Or(a=notInstTypeANDNotBitDestARegister, b=bitDestARegister, out=loadARegister);
    ARegister(in=muxedARegister, load=loadARegister, out=AddressRegisterValue, out[0..14]=addressM);

    // =================== PC ===================

    // else if C-Instruction, jmp control bits logic

    // Getting outGreaterThanZero
    Not(in=outLessThanZero, out=outEqualOrGreaterThanZero);
    // out = 0     out => 0     out > 0
    //     0           0           0
    //     0           1           1
    //     1           0           0
    //     1           1           0
    // not(outEqualsZero) . outEqualOrGreaterThanZero
    Not(in=outEqualsZero, out=notOutEqualsZero);
    And(a=notOutEqualsZero, b=outEqualOrGreaterThanZero, out=outGreaterThanZero);

    Xor(a=instruction[0], b=outGreaterThanZero, out=jmpXor0);
    Xor(a=instruction[1], b=outEqualsZero, out=jmpXor1);
    Xor(a=instruction[2], b=outLessThanZero, out=jmpXor2);

    Or(a=jmpXor0, b=jmpXor1, out=jmpOrPart1);
    Or(a=jmpXor2, b=jmpOrPart1, out=jmpOr3);

    Not(in=jmpOr3, out=loadIfNonNullJMPBits);

    // if JNE (out != 0) == 1, 0, 1
    // First of all, identify when we have this pattern with j1 . not(j2) . j3
    // To out != 0 is easy, out != is simply Not(out=0)
    Not(in=instruction[1], out=notJ2);
    And(a=instruction[0], b=notJ2, out=andJ3notJ2);
    And(a=instruction[2], b=andJ3notJ2, out=isJNE);
    And(a=isJNE, b=notOutEqualsZero, out=JNECase);

    Mux(a=loadIfNonNullJMPBits, b=JNECase, sel=isJNE, out=loadJNE);

    // if JLE (out <= 0) == 1, 1, 0
    // JLE: j1 . j2 . not(j3)
    Or(a=outEqualsZero, b=outLessThanZero, out=outLessOrEqualZero);
    Not(in=instruction[0], out=notJ3);
    And(a=instruction[2], b=instruction[1], out=andJ1J2);
    And(a=andJ1J2, b=notJ3, out=isJLE);

    And(a=isJLE, b=outLessOrEqualZero, out=JLECase);

    Mux(a=loadJNE, b=JLECase, sel=isJLE, out=loadJLE);

    // if JGE (out >= 0) == 0 1 1
    Not(in=instruction[2], out=notJ1);
    And(a=notJ1, b=andJ3J2, out=isJGE);
    And(a=isJGE, b=outEqualOrGreaterThanZero, out=JGECase);

    Mux(a=loadJLE, b=JGECase, sel=isJGE, out=loadJGE);

    // if JEQ (out == 0) == 0 1 0
    And(a=notJ1, b=notJ3, out=notJ1J3);
    And(a=notJ1J3, b=instruction[1], out=isJEQ);
    And(a=isJEQ, b=outEqualsZero, out=JEQCase);

    Mux(a=loadJGE, b=JEQCase, sel=isJEQ, out=loadJEQ);

    // if JMP == 1, 1, 1
    And(a=instruction[0], b=instruction[1], out=andJ3J2);
    And(a=andJ1J2, b=andJ3J2, out=isJMP);

    Mux(a=loadJEQ, b=true, sel=isJMP, out=loadJMP);

    // if control bits == 0, 0, 0 => inc=1, load=0
    Or(a=instruction[0], b=instruction[1], out=nonNullBitsOr1);
    Or(a=instruction[2], b=nonNullBitsOr1, out=isNotNullJMPBits);

    Mux(a=false, b=loadJMP, sel=isNotNullJMPBits, out=loadIfCinstruction);

    // if A-Instruction => inc=1, load=0
    // In this case, load=instruction[15] itself

    // Decide between loadIfCInstruction or loadIfAinstruction
    Mux(a=false, b=loadIfCinstruction, sel=instruction[15], out=pcLoad);

    // They will always be the opposite since
    // either the CPU jumps to a X instruction or it increments 1
    Not(in=pcLoad, out=pcInc);

    PC(in=AddressRegisterValue, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);

    // =================== ALU ===================

    // Address/Memory acting as ALU's input part
    Mux16(a=AddressRegisterValue, b=inM, sel=bitA, out=ALUyInputAddressOrMemory);

    // DataRegister part
    // If A-Instruction, don't even load
    And(a=bitDestDataRegister, b=instructionType, out=loadDataRegister);
    DRegister(in=aluOutput, load=loadDataRegister, out=DataRegisterValue);

    // Finally, ALU
    ALU(x=DataRegisterValue, y=ALUyInputAddressOrMemory,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOutput,
        zr=outEqualsZero,
        ng=outLessThanZero);

    // WriteM and outM part
    // If A-Instruction, WriteM=0
    And(a=bitDestMemory, b=instructionType, out=writeM, out=writeMCopy);
    Mux16(a=false, b=aluOutput, sel=writeMCopy, out=outM);
}
