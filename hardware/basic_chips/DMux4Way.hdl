// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux4Way.hdl

/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);

    And3(a=in, b=notsel0, c=notsel1, out=a);
    And3(a=in, b=sel[0], c=notsel1, out=b);
    And3(a=in, b=notsel0, c=sel[1], out=c);
    And3(a=in, b=sel[0], c=sel[1], out=d);
}

/*
func a: in . not(sel1) . not(sel2)

func b: in . not(sel1) . sel2

func c: in . sel1 . not(sel2)

func d: in . sel1 . sel2

####

Inverse tree solution:
DMux(in=in, sel=sel[1], a=ab, b=cd);

DMux(in=ab, sel=sel[0], a=a, b=b);
DMux(in=cd, sel=sel[0], a=c, b=d);
/
