// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // else                    out[t+1] = out[t]
    // out[t]

    // else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
    Inc16(in=outLoop, out=plusOne);  
    Mux16(a=in, b=plusOne, sel=inc, out=incPhase);

    // else if (load[t] == 1)  out[t+1] = in[t]
    Mux16(a=incPhase, b=in, sel=load, out=loadPhase);

    // if      (reset[t] == 1) out[t+1] = 0
    Mux16(a=loadPhase, b[0..15]=false, sel=reset, out=resetPhase);


    Register(in=resetPhase, load=true, out=outLoop, out=out);
}

/*
Correct try. Deciding which will be the load param for the register.
Which depends on all other params as follows:

reset   load    inc        loadFinal
  0        0       0          0
  0        1       0          1
  0        0       1          1
  0        1       1          1
  1        0       0          1
  1        1       0          1
  1        0       1          1
  1        1       1          1

Or(a=reset, b=load, out=orForLoad);
Or(a=orForLoad, b=inc, out=loadFinal);

Actually, since we're using a Mux for the load[t]==1 case, we do not need
to worry about any loadFinal case, we can set the load=True within the register.
We will always update to the right value, even for the the previous output and current input


Trying with ALU (not successfully):

reset   load    inc        f   out
  1        ?       0       1   0
  0        ?       0       0   x
  1        ?       0       0   y
  1        ?       y       0   x+1
  1        ?       y       0   y+1

 |zx |nx |zy |ny | f |no |       out        
 | 1 | 0 | 1 | 0 | 1 | 0 | 0 (reset=1, load=?, inc=0)
 | 0 | 0 | 1 | 1 | 0 | 0 | x (reset=0, load=1, inc=0)
 | 1 | 1 | 0 | 0 | 0 | 0 | y (reset=0, load=0, inc=0)
 | 1 | 1 | 0 | 1 | 1 | 1 | y + 1 (reset=0, load=0, inc=1)
 | r |nx | r |ny | f | inc |
/
